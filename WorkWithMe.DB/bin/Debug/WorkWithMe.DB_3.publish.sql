/*
Deployment script for WorkWithMe

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "WorkWithMe"
:setvar DefaultFilePrefix "WorkWithMe"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
/*
The type for column Id in table [dbo].[tblCity] is currently  INT NOT NULL but is being changed to  UNIQUEIDENTIFIER NOT NULL. There is no implicit or explicit conversion.
*/

IF EXISTS (select top 1 1 from [dbo].[tblCity])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The type for column Id in table [dbo].[tblState] is currently  INT NOT NULL but is being changed to  UNIQUEIDENTIFIER NOT NULL. There is no implicit or explicit conversion.
*/

IF EXISTS (select top 1 1 from [dbo].[tblState])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The type for column CityId in table [dbo].[tblZip] is currently  INT NOT NULL but is being changed to  UNIQUEIDENTIFIER NOT NULL. There is no implicit or explicit conversion.

The type for column StateId in table [dbo].[tblZip] is currently  INT NOT NULL but is being changed to  UNIQUEIDENTIFIER NOT NULL. There is no implicit or explicit conversion.
*/

IF EXISTS (select top 1 1 from [dbo].[tblZip])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'Starting rebuilding table [dbo].[tblCity]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_tblCity] (
    [Id]       UNIQUEIDENTIFIER NOT NULL,
    [CityName] NVARCHAR (50)    NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[tblCity])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_tblCity] ([Id], [CityName])
        SELECT   [Id],
                 [CityName]
        FROM     [dbo].[tblCity]
        ORDER BY [Id] ASC;
    END

DROP TABLE [dbo].[tblCity];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_tblCity]', N'tblCity';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[tblState]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_tblState] (
    [Id]        UNIQUEIDENTIFIER NOT NULL,
    [StateName] NVARCHAR (50)    NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[tblState])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_tblState] ([Id], [StateName])
        SELECT   [Id],
                 [StateName]
        FROM     [dbo].[tblState]
        ORDER BY [Id] ASC;
    END

DROP TABLE [dbo].[tblState];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_tblState]', N'tblState';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[tblZip]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_tblZip] (
    [Id]      INT              NOT NULL,
    [CityId]  UNIQUEIDENTIFIER NOT NULL,
    [StateId] UNIQUEIDENTIFIER NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[tblZip])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_tblZip] ([Id], [CityId], [StateId])
        SELECT   [Id],
                 [CityId],
                 [StateId]
        FROM     [dbo].[tblZip]
        ORDER BY [Id] ASC;
    END

DROP TABLE [dbo].[tblZip];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_tblZip]', N'tblZip';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering [dbo].[spCreateUser]...';


GO
--Creates user and adds random salt to password.

ALTER PROCEDURE [dbo].[spCreateUser]
	@Username nvarchar(40),
	@Password nvarchar(24),
	@FirstName nvarchar(50),
	@MiddleInitial nvarchar(2),
	@Lastname nvarchar(50),
	@Zip int,
	@Address nvarchar(50),
	@City nvarchar(50),
	@State nvarchar(2),
	@IsAddressPrivate bit,
	@Response nvarchar(100) output
AS
BEGIN
	SET NOCOUNT ON

	IF EXISTS (SELECT * FROM [dbo].[tblUser] WHERE Username = @Username)
	BEGIN
		SET @Response='Username is taken.'
	    RETURN 0
	END
    DECLARE @salt UNIQUEIDENTIFIER=NEWID()
    BEGIN TRY
	
        INSERT INTO [dbo].[tblUser] (Id, Username, PasswordHash, PasswordSalt, FirstName, MiddleInitial, LastName, Zip, Address, IsAddressPrivate, UserImg)
        VALUES(NewId(), @Username, HASHBYTES('SHA2_512', @Password+CAST(@salt AS NVARCHAR(36))), @salt, @FirstName, @MiddleInitial, @LastName, @Zip, @Address, @IsAddressPrivate, null);
		
		IF NOT EXISTS(SELECT TOP 1 s.Id FROM tblState s WHERE s.StateName = @State)
		BEGIN
			INSERT INTO [dbo].[tblState] (Id, StateName) VALUES (NewId(), @State)
		END

		IF NOT EXISTS(SELECT TOP 1 c.Id FROM tblCity c WHERE c.Cityname = @City)
		BEGIN
			INSERT INTO [dbo].[tblCity] (Id, CityName) VALUES (NewId(), @City)
		END

		DECLARE @cityId UNIQUEIDENTIFIER = (SELECT c.Id FROM tblCity c WHERE c.CityName = @City);
		DECLARE @stateId UNIQUEIDENTIFIER = (SELECT s.Id FROM tblState s WHERE s.StateName = @State);

		IF NOT EXISTS (SELECT TOP 1 z.Id FROM tblZip z WHERE z.Id = @Zip)
		BEGIN
			INSERT INTO [dbo].[tblZip] (Id, CityId, StateId) VALUES (@Zip, @cityId, @stateId)
		END

        SET @Response='Successfully added user!'
		RETURN 1
    END TRY
    BEGIN CATCH
        SET @Response=ERROR_MESSAGE() 
		RETURN 0
    END CATCH
END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
declare @response nvarchar(100);

exec spCreateUser @Username = 'Test',
 @Password = 'Test', @FirstName = 'Testy', 
 @MiddleInitial = 'T', 
 @Lastname = 'McTesterson',
 @Zip = 54914,
 @City = 'Appleton',
 @State = 'WI',
 @Address = '1234 Street Rd',
 @IsAddressPrivate = 0,
 @Response = @response output;
GO

GO
PRINT N'Update complete.';


GO
