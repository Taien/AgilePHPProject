/*
Deployment script for WorkWithMe.DB

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "WorkWithMe.DB"
:setvar DefaultFilePrefix "WorkWithMe.DB"
:setvar DefaultDataPath "C:\Users\Tyler\AppData\Local\Microsoft\VisualStudio\SSDT\WorkWithMe"
:setvar DefaultLogPath "C:\Users\Tyler\AppData\Local\Microsoft\VisualStudio\SSDT\WorkWithMe"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                CURSOR_DEFAULT LOCAL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE,
                DISABLE_BROKER 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (QUERY_CAPTURE_MODE = AUTO, OPERATION_MODE = READ_WRITE) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Rename refactoring operation with key 2024606a-a027-438b-a0f7-8cd73c3eecf0 is skipped, element [dbo].[tblUser].[MiddleIntial] (SqlSimpleColumn) will not be renamed to MiddleInitial';


GO
PRINT N'Rename refactoring operation with key 3f3ee060-748a-43be-ae14-8f107c3c4961 is skipped, element [dbo].[tblUserContact].[Own] (SqlSimpleColumn) will not be renamed to OwnerUserId';


GO
PRINT N'Rename refactoring operation with key c210c68e-a702-4852-bfa8-c46400301c64 is skipped, element [dbo].[tblUserContact].[InviteStatus] (SqlSimpleColumn) will not be renamed to InviteStatusId';


GO
PRINT N'Rename refactoring operation with key ab3b76b7-b2c6-482d-a7d8-6ab3c6d80008 is skipped, element [dbo].[tblGroupInvite].[InviteStatus] (SqlSimpleColumn) will not be renamed to InviteStatusId';


GO
PRINT N'Creating [dbo].[tblCity]...';


GO
CREATE TABLE [dbo].[tblCity] (
    [Id]       UNIQUEIDENTIFIER NOT NULL,
    [CityName] NVARCHAR (50)    NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[tblGroup]...';


GO
CREATE TABLE [dbo].[tblGroup] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [Name]             NVARCHAR (50)    NOT NULL,
    [Description]      NVARCHAR (100)   NOT NULL,
    [GroupType]        NVARCHAR (50)    NOT NULL,
    [OwnerUserId]      UNIQUEIDENTIFIER NOT NULL,
    [OwnerGroupId]     UNIQUEIDENTIFIER NULL,
    [GroupImg]         IMAGE            NULL,
    [CanPostDefault]   BIT              NOT NULL,
    [CanInviteDefault] BIT              NOT NULL,
    [CanDeleteDefault] BIT              NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[tblGroupInvite]...';


GO
CREATE TABLE [dbo].[tblGroupInvite] (
    [Id]             UNIQUEIDENTIFIER NOT NULL,
    [OwnerUserId]    UNIQUEIDENTIFIER NOT NULL,
    [TargetUserId]   UNIQUEIDENTIFIER NOT NULL,
    [TargetGroupId]  UNIQUEIDENTIFIER NOT NULL,
    [InviteStatusId] INT              NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[tblGroupType]...';


GO
CREATE TABLE [dbo].[tblGroupType] (
    [Id]          INT           NOT NULL,
    [Description] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[tblGroupUser]...';


GO
CREATE TABLE [dbo].[tblGroupUser] (
    [Id]           UNIQUEIDENTIFIER NOT NULL,
    [UserId]       UNIQUEIDENTIFIER NOT NULL,
    [GroupId]      UNIQUEIDENTIFIER NOT NULL,
    [IsGroupAdmin] BIT              NOT NULL,
    [CanPost]      BIT              NOT NULL,
    [CanInvite]    BIT              NOT NULL,
    [CanDelete]    BIT              NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[tblInviteStatus]...';


GO
CREATE TABLE [dbo].[tblInviteStatus] (
    [Id]          INT           NOT NULL,
    [Description] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[tblPost]...';


GO
CREATE TABLE [dbo].[tblPost] (
    [Id]             UNIQUEIDENTIFIER NOT NULL,
    [OwnerUserId]    UNIQUEIDENTIFIER NOT NULL,
    [TargetGroupId]  UNIQUEIDENTIFIER NULL,
    [Title]          NVARCHAR (50)    NOT NULL,
    [Content]        NVARCHAR (MAX)   NOT NULL,
    [IsSticky]       BIT              NOT NULL,
    [IsDeleted]      BIT              NOT NULL,
    [TimeStamp]      DATETIME         NOT NULL,
    [EventTimeStamp] DATETIME         NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[tblState]...';


GO
CREATE TABLE [dbo].[tblState] (
    [Id]        UNIQUEIDENTIFIER NOT NULL,
    [StateName] NVARCHAR (50)    NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[tblUser]...';


GO
CREATE TABLE [dbo].[tblUser] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [Username]         NVARCHAR (50)    NOT NULL,
    [PasswordHash]     BINARY (64)      NOT NULL,
    [PasswordSalt]     UNIQUEIDENTIFIER NOT NULL,
    [FirstName]        NVARCHAR (50)    NOT NULL,
    [MiddleInitial]    NVARCHAR (2)     NULL,
    [LastName]         NVARCHAR (50)    NOT NULL,
    [Zip]              INT              NULL,
    [Address]          NVARCHAR (50)    NULL,
    [IsAddressPrivate] BIT              NOT NULL,
    [UserImg]          IMAGE            NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[tblUserContact]...';


GO
CREATE TABLE [dbo].[tblUserContact] (
    [Id]             INT              NOT NULL,
    [OwnerUserId]    UNIQUEIDENTIFIER NOT NULL,
    [TargetUserId]   UNIQUEIDENTIFIER NOT NULL,
    [InviteStatusId] INT              NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[tblZip]...';


GO
CREATE TABLE [dbo].[tblZip] (
    [Id]      INT              NOT NULL,
    [CityId]  UNIQUEIDENTIFIER NOT NULL,
    [StateId] UNIQUEIDENTIFIER NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Creating [dbo].[spCreatePost]...';


GO
CREATE PROCEDURE [dbo].[spCreatePost]
	@PosterId uniqueidentifier,
	@TargetGroupId uniqueidentifier null,
	@Title nvarchar(50),
	@Content nvarchar(MAX),
	@IsSticky bit,
	@EventTimeStamp datetime null
AS
	BEGIN
		INSERT INTO [dbo].[tblPost] (Id, OwnerUserId, TargetGroupId, Title, Content, IsSticky, 
									 IsDeleted, TimeStamp, EventTimeStamp) values
		(NewId(),@PosterId,@TargetGroupId,@Title,@Content,@IsSticky,0, GETDATE(), @EventTimeStamp);
	END
RETURN @@ROWCOUNT;
GO
PRINT N'Creating [dbo].[spCreateUser]...';


GO
--Creates user and adds random salt to password.

CREATE PROCEDURE [dbo].[spCreateUser]
	@Username nvarchar(40),
	@Password nvarchar(24),
	@FirstName nvarchar(50),
	@MiddleInitial nvarchar(2),
	@Lastname nvarchar(50),
	@Zip int,
	@Address nvarchar(50),
	@City nvarchar(50),
	@State nvarchar(2),
	@IsAddressPrivate bit,
	@Response nvarchar(100) output
AS
BEGIN
	SET NOCOUNT ON

	IF EXISTS (SELECT * FROM [dbo].[tblUser] WHERE Username = @Username)
	BEGIN
		SET @Response='Username is taken.'
	    RETURN 0
	END
    DECLARE @salt UNIQUEIDENTIFIER=NEWID()
    BEGIN TRY
	
        INSERT INTO [dbo].[tblUser] (Id, Username, PasswordHash, PasswordSalt, FirstName, MiddleInitial, LastName, Zip, Address, IsAddressPrivate, UserImg)
        VALUES(NewId(), @Username, HASHBYTES('SHA2_512', @Password+CAST(@salt AS NVARCHAR(36))), @salt, @FirstName, @MiddleInitial, @LastName, @Zip, @Address, @IsAddressPrivate, null);
		
		IF NOT EXISTS(SELECT TOP 1 s.Id FROM tblState s WHERE s.StateName = @State)
		    INSERT INTO [dbo].[tblState] (Id, StateName) VALUES (NewId(), @State)
	
		IF NOT EXISTS(SELECT TOP 1 c.Id FROM tblCity c WHERE c.Cityname = @City)
		    INSERT INTO [dbo].[tblCity] (Id, CityName) VALUES (NewId(), @City)
		
		DECLARE @cityId UNIQUEIDENTIFIER = (SELECT c.Id FROM tblCity c WHERE c.CityName = @City);
		DECLARE @stateId UNIQUEIDENTIFIER = (SELECT s.Id FROM tblState s WHERE s.StateName = @State);

		IF NOT EXISTS (SELECT TOP 1 z.Id FROM tblZip z WHERE z.Id = @Zip)
		    INSERT INTO [dbo].[tblZip] (Id, CityId, StateId) VALUES (@Zip, @cityId, @stateId)
		
        SET @Response='Successfully added user!'
		RETURN 1
    END TRY
    BEGIN CATCH
        SET @Response=ERROR_MESSAGE() 
		RETURN 0
    END CATCH
END
GO
PRINT N'Creating [dbo].[spDoLogin]...';


GO
--returns the GUID for the user if the login succeed, otherwise returns nothing

CREATE PROCEDURE [dbo].[spDoLogin]
	@Username nvarchar(50),
	@Password nvarchar(24)
AS
BEGIN
     SET NOCOUNT ON
     SELECT Id FROM [dbo].[tblUser] WHERE Username=@Username AND PasswordHash=HASHBYTES('SHA2_512', @Password+CAST(PasswordSalt AS NVARCHAR(36)))
END
GO
PRINT N'Creating [dbo].[spGetPostsForUser]...';


GO
CREATE PROCEDURE [dbo].[spGetPostsForUser]
	@UserId uniqueidentifier
AS
	SELECT * from [dbo].[tblPost] where OwnerUserId = @UserId
UNION
	SELECT * from [dbo].[tblPost] where OwnerUserId in (
		SELECT TargetUserId from [dbo].[tblUserContact] where OwnerUserId = @UserId and InviteStatusId = 2 -- 2 = accepted 
	)
GO
-- Refactoring step to update target server with deployed transaction logs

IF OBJECT_ID(N'dbo.__RefactorLog') IS NULL
BEGIN
    CREATE TABLE [dbo].[__RefactorLog] (OperationKey UNIQUEIDENTIFIER NOT NULL PRIMARY KEY)
    EXEC sp_addextendedproperty N'microsoft_database_tools_support', N'refactoring log', N'schema', N'dbo', N'table', N'__RefactorLog'
END
GO
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '2024606a-a027-438b-a0f7-8cd73c3eecf0')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('2024606a-a027-438b-a0f7-8cd73c3eecf0')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = '3f3ee060-748a-43be-ae14-8f107c3c4961')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('3f3ee060-748a-43be-ae14-8f107c3c4961')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'c210c68e-a702-4852-bfa8-c46400301c64')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('c210c68e-a702-4852-bfa8-c46400301c64')
IF NOT EXISTS (SELECT OperationKey FROM [dbo].[__RefactorLog] WHERE OperationKey = 'ab3b76b7-b2c6-482d-a7d8-6ab3c6d80008')
INSERT INTO [dbo].[__RefactorLog] (OperationKey) values ('ab3b76b7-b2c6-482d-a7d8-6ab3c6d80008')

GO

GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
delete from tblUser WHERE Username = 'Test'; 

declare @response nvarchar(100);

exec spCreateUser @Username = 'Test',
 @Password = 'Test', @FirstName = 'Testy', 
 @MiddleInitial = 'T', 
 @Lastname = 'McTesterson',
 @Zip = 54914,
 @City = 'Appleton',
 @State = 'WI',
 @Address = '1234 Street Rd',
 @IsAddressPrivate = 0,
 @Response = @response output;

 PRINT @response;

 delete from tblInviteStatus;

 insert into tblInviteStatus (Id, Description)
 values 
   (0,'Invited'),
   (1,'Declined'),
   (2,'Accepted'),
   (3,'Blocked');
GO

GO
PRINT N'Update complete.';


GO
