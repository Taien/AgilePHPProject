/*
Deployment script for WorkWithMe

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "WorkWithMe"
:setvar DefaultFilePrefix "WorkWithMe"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
/*
The type for column GroupImgId in table [dbo].[tblGroup] is currently  IMAGE NULL but is being changed to  INT NULL. There is no implicit or explicit conversion.

The type for column GroupType in table [dbo].[tblGroup] is currently  NVARCHAR (50) NOT NULL but is being changed to  INT NOT NULL. Data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[tblGroup])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'The following operation was generated from a refactoring log file 70bca09f-f3c3-4393-bbae-08b8a61c5ea3';

PRINT N'Rename [dbo].[tblGroup].[GroupImg] to GroupImgId';


GO
EXECUTE sp_rename @objname = N'[dbo].[tblGroup].[GroupImg]', @newname = N'GroupImgId', @objtype = N'COLUMN';


GO
PRINT N'Starting rebuilding table [dbo].[tblGroup]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_tblGroup] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [Name]             NVARCHAR (50)    NOT NULL,
    [Description]      NVARCHAR (100)   NOT NULL,
    [GroupType]        INT              NOT NULL,
    [OwnerUserId]      UNIQUEIDENTIFIER NOT NULL,
    [OwnerGroupId]     UNIQUEIDENTIFIER NULL,
    [GroupImgId]       INT              NULL,
    [CanPostDefault]   BIT              NOT NULL,
    [CanInviteDefault] BIT              NOT NULL,
    [CanDeleteDefault] BIT              NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[tblGroup])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_tblGroup] ([Id], [Name], [Description], [GroupType], [OwnerUserId], [OwnerGroupId], [GroupImgId], [CanPostDefault], [CanInviteDefault], [CanDeleteDefault])
        SELECT   [Id],
                 [Name],
                 [Description],
                 [GroupType],
                 [OwnerUserId],
                 [OwnerGroupId],
                 [GroupImgId],
                 [CanPostDefault],
                 [CanInviteDefault],
                 [CanDeleteDefault]
        FROM     [dbo].[tblGroup]
        ORDER BY [Id] ASC;
    END

DROP TABLE [dbo].[tblGroup];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_tblGroup]', N'tblGroup';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[tblGroupContact]...';


GO
CREATE TABLE [dbo].[tblGroupContact] (
    [Id]             UNIQUEIDENTIFIER NOT NULL,
    [OwnerUserId]    UNIQUEIDENTIFIER NOT NULL,
    [TargetUserId]   UNIQUEIDENTIFIER NOT NULL,
    [TargetGroupId]  UNIQUEIDENTIFIER NOT NULL,
    [IsGroupAdmin]   BIT              NOT NULL,
    [CanPost]        BIT              NOT NULL,
    [CanInvite]      BIT              NOT NULL,
    [CanDelete]      BIT              NOT NULL,
    [InviteStatusId] INT              NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Altering [dbo].[spSearchUser]...';


GO
ALTER PROCEDURE [dbo].[spSearchUser]
	@SearchString nvarchar(255),
	@OriginUserId uniqueidentifier
AS
	select Id, Username, FirstName, MiddleInitial, LastName, EmailAddress
	from tblUser
	where (Username like '%' + @SearchString + '%' 
	or EmailAddress like '%' + @SearchString + '%'
	or FirstName + CASE WHEN MiddleInitial=null THEN ' ' 
	     ELSE ' ' + MiddleInitial + '. ' END + LastName 
		  like '%' + @SearchString + '%')
	and Id != @OriginUserId
	and Id not in --this checks if this person A) is already a contact, B) is already invited, or C) blocked the user requesting contact 
		(select TargetUserId from [dbo].[tblUserContact] where OwnerUserId = @OriginUserId and InviteStatusId != 1 --invite status of 1 means declined, which allows them to request again
		 union
		 select OwnerUserId from [dbo].[tblUserContact] where TargetUserId = @OriginUserId and InviteStatusId != 1)
GO
PRINT N'Creating [dbo].[spGetContacts]...';


GO
CREATE PROCEDURE [dbo].[spGetContacts]
	@UserId uniqueidentifier
AS
	select Id, Username, FirstName, MiddleInitial, LastName, EmailAddress
	from tblUser
	where Id in
	(select TargetUserId from [dbo].[tblUserContact] where OwnerUserId = @UserId and InviteStatusId = 2 --invite status of 1 means declined, which allows them to request again
	 union
	 select OwnerUserId from [dbo].[tblUserContact] where TargetUserId = @UserId and InviteStatusId = 2)
GO
PRINT N'Creating [dbo].[spGreateGroup]...';


GO
CREATE PROCEDURE [dbo].[spGreateGroup]
	@Name nvarchar(50),
	@Description nvarchar(100),
	@GroupType int,
	@OwnerUserId uniqueidentifier,
	@OwnerGroupId uniqueidentifier null,
	@CanPostDefault bit,
	@CanInviteDefault bit,
	@CanDeleteDefault bit,
	@Response nvarchar(100) output
AS
	BEGIN
		IF EXISTS (SELECT * FROM [dbo].[tblGroup] WHERE Name = @Name)
		BEGIN
			SET @Response='Group name is taken.'
			RETURN 0
		END

		BEGIN TRY
			INSERT INTO [dbo].[tblGroup] (Id, Name, Description, GroupType, OwnerUserId, OwnerGroupId, GroupImgId, CanPostDefault, CanInviteDefault, CanDeleteDefault)
			values (NEWID(), @Name, @Description, @GroupType, @OwnerUserId, @OwnerGroupId, null, @CanPostDefault, @CanInviteDefault, @CanDeleteDefault)

			SET @Response='Successfully created group!'
			RETURN 1
		END TRY
		BEGIN CATCH
			SET @Response=ERROR_MESSAGE() 
			RETURN 0
		END CATCH
	END
GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
delete from tblUser WHERE Username = 'Test'; 

declare @response nvarchar(100);

exec spCreateUser @Username = 'Test',
 @Password = 'Test', @FirstName = 'Testy', 
 @MiddleInitial = 'T', 
 @Lastname = 'McTesterson',
 @Zip = 54914,
 @City = 'Appleton',
 @State = 'WI',
 @Address = '1234 Street Rd',
 @IsAddressPrivate = 0,
 @EmailAddress = 'test@test.test',
 @Response = @response output;

 PRINT @response;

 delete from tblInviteStatus;

 insert into tblInviteStatus (Id, Description)
 values 
   (0,'Invited'),
   (1,'Declined'),
   (2,'Accepted'),
   (3,'Blocked');

 delete from tblUserContact where OwnerUserId = '00000000-0000-0000-0000-000000000000';

 insert into tblUserContact (Id, OwnerUserId, TargetUserId, InviteStatusId)
 values (NewID(), '00000000-0000-0000-0000-000000000000','00000000-0000-0000-0000-000000000001',2);

 delete from tblPost where OwnerUserId = '00000000-0000-0000-0000-000000000000';
 delete from tblPost where OwnerUserId = '00000000-0000-0000-0000-000000000001';

 insert into tblPost (Id, OwnerUserId, Title, Content, IsSticky, IsDeleted, TimeStamp, EventTimeStamp)
 values
 (NewId(),'00000000-0000-0000-0000-000000000000','Test Post from User 0','Stuff A',0,0, GETDATE(),null),
 (NewId(),'00000000-0000-0000-0000-000000000001','Test Post from User 1','Stuff B',0,0, GETDATE(),null);
GO

GO
PRINT N'Update complete.';


GO
