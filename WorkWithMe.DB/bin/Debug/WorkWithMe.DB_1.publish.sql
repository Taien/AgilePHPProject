/*
Deployment script for WorkWithMe

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "WorkWithMe"
:setvar DefaultFilePrefix "WorkWithMe"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
/*
The type for column Id in table [dbo].[tblGroup] is currently  INT NOT NULL but is being changed to  UNIQUEIDENTIFIER NOT NULL. There is no implicit or explicit conversion.

The type for column OwnerGroupId in table [dbo].[tblGroup] is currently  INT NULL but is being changed to  UNIQUEIDENTIFIER NULL. There is no implicit or explicit conversion.

The type for column OwnerUserId in table [dbo].[tblGroup] is currently  INT NOT NULL but is being changed to  UNIQUEIDENTIFIER NOT NULL. There is no implicit or explicit conversion.
*/

IF EXISTS (select top 1 1 from [dbo].[tblGroup])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The type for column Id in table [dbo].[tblGroupInvite] is currently  INT NOT NULL but is being changed to  UNIQUEIDENTIFIER NOT NULL. There is no implicit or explicit conversion.

The type for column OwnerUserId in table [dbo].[tblGroupInvite] is currently  INT NOT NULL but is being changed to  UNIQUEIDENTIFIER NOT NULL. There is no implicit or explicit conversion.

The type for column TargetGroupId in table [dbo].[tblGroupInvite] is currently  INT NOT NULL but is being changed to  UNIQUEIDENTIFIER NOT NULL. There is no implicit or explicit conversion.

The type for column TargetUserId in table [dbo].[tblGroupInvite] is currently  INT NOT NULL but is being changed to  UNIQUEIDENTIFIER NOT NULL. There is no implicit or explicit conversion.
*/

IF EXISTS (select top 1 1 from [dbo].[tblGroupInvite])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The type for column GroupId in table [dbo].[tblGroupUser] is currently  INT NOT NULL but is being changed to  UNIQUEIDENTIFIER NOT NULL. There is no implicit or explicit conversion.

The type for column Id in table [dbo].[tblGroupUser] is currently  INT NOT NULL but is being changed to  UNIQUEIDENTIFIER NOT NULL. There is no implicit or explicit conversion.

The type for column UserId in table [dbo].[tblGroupUser] is currently  INT NOT NULL but is being changed to  UNIQUEIDENTIFIER NOT NULL. There is no implicit or explicit conversion.
*/

IF EXISTS (select top 1 1 from [dbo].[tblGroupUser])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The type for column Id in table [dbo].[tblPost] is currently  INT NOT NULL but is being changed to  UNIQUEIDENTIFIER NOT NULL. There is no implicit or explicit conversion.

The type for column OwnerUserId in table [dbo].[tblPost] is currently  INT NOT NULL but is being changed to  UNIQUEIDENTIFIER NOT NULL. There is no implicit or explicit conversion.

The type for column TargetGroupId in table [dbo].[tblPost] is currently  INT NOT NULL but is being changed to  UNIQUEIDENTIFIER NOT NULL. There is no implicit or explicit conversion.
*/

IF EXISTS (select top 1 1 from [dbo].[tblPost])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
/*
The type for column MiddleInitial in table [dbo].[tblUser] is currently  VARCHAR (50) NOT NULL but is being changed to  NVARCHAR (2) NULL. Data loss could occur.

The type for column Zip in table [dbo].[tblUser] is currently  VARCHAR (50) NULL but is being changed to  INT NULL. Data loss could occur.
*/

IF EXISTS (select top 1 1 from [dbo].[tblUser])
    RAISERROR (N'Rows were detected. The schema update is terminating because data loss might occur.', 16, 127) WITH NOWAIT

GO
PRINT N'The following operation was generated from a refactoring log file 2024606a-a027-438b-a0f7-8cd73c3eecf0';

PRINT N'Rename [dbo].[tblUser].[MiddleIntial] to MiddleInitial';


GO
EXECUTE sp_rename @objname = N'[dbo].[tblUser].[MiddleIntial]', @newname = N'MiddleInitial', @objtype = N'COLUMN';


GO
PRINT N'Altering [dbo].[tblCity]...';


GO
ALTER TABLE [dbo].[tblCity] ALTER COLUMN [CityName] NVARCHAR (50) NOT NULL;


GO
PRINT N'Starting rebuilding table [dbo].[tblGroup]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_tblGroup] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [Name]             NVARCHAR (50)    NOT NULL,
    [Description]      NVARCHAR (100)   NOT NULL,
    [GroupType]        NVARCHAR (50)    NOT NULL,
    [OwnerUserId]      UNIQUEIDENTIFIER NOT NULL,
    [OwnerGroupId]     UNIQUEIDENTIFIER NULL,
    [GroupImg]         IMAGE            NULL,
    [CanPostDefault]   INT              NOT NULL,
    [CanInviteDefault] INT              NOT NULL,
    [CanDeleteDefault] INT              NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[tblGroup])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_tblGroup] ([Id], [Name], [Description], [GroupType], [OwnerUserId], [OwnerGroupId], [GroupImg], [CanPostDefault], [CanInviteDefault], [CanDeleteDefault])
        SELECT   [Id],
                 [Name],
                 [Description],
                 [GroupType],
                 [OwnerUserId],
                 [OwnerGroupId],
                 [GroupImg],
                 [CanPostDefault],
                 [CanInviteDefault],
                 [CanDeleteDefault]
        FROM     [dbo].[tblGroup]
        ORDER BY [Id] ASC;
    END

DROP TABLE [dbo].[tblGroup];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_tblGroup]', N'tblGroup';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[tblGroupInvite]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_tblGroupInvite] (
    [Id]            UNIQUEIDENTIFIER NOT NULL,
    [OwnerUserId]   UNIQUEIDENTIFIER NOT NULL,
    [TargetUserId]  UNIQUEIDENTIFIER NOT NULL,
    [TargetGroupId] UNIQUEIDENTIFIER NOT NULL,
    [InviteStatus]  INT              NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[tblGroupInvite])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_tblGroupInvite] ([Id], [OwnerUserId], [TargetUserId], [TargetGroupId], [InviteStatus])
        SELECT   [Id],
                 [OwnerUserId],
                 [TargetUserId],
                 [TargetGroupId],
                 [InviteStatus]
        FROM     [dbo].[tblGroupInvite]
        ORDER BY [Id] ASC;
    END

DROP TABLE [dbo].[tblGroupInvite];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_tblGroupInvite]', N'tblGroupInvite';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering [dbo].[tblGroupType]...';


GO
ALTER TABLE [dbo].[tblGroupType] ALTER COLUMN [Description] NVARCHAR (50) NOT NULL;


GO
PRINT N'Starting rebuilding table [dbo].[tblGroupUser]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_tblGroupUser] (
    [Id]           UNIQUEIDENTIFIER NOT NULL,
    [UserId]       UNIQUEIDENTIFIER NOT NULL,
    [GroupId]      UNIQUEIDENTIFIER NOT NULL,
    [IsGroupAdmin] BIT              NOT NULL,
    [CanPost]      BIT              NOT NULL,
    [CanInvite]    BIT              NOT NULL,
    [CanDelete]    BIT              NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[tblGroupUser])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_tblGroupUser] ([Id], [UserId], [GroupId], [IsGroupAdmin], [CanPost], [CanInvite], [CanDelete])
        SELECT   [Id],
                 [UserId],
                 [GroupId],
                 [IsGroupAdmin],
                 [CanPost],
                 [CanInvite],
                 [CanDelete]
        FROM     [dbo].[tblGroupUser]
        ORDER BY [Id] ASC;
    END

DROP TABLE [dbo].[tblGroupUser];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_tblGroupUser]', N'tblGroupUser';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[tblInviteStatus]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_tblInviteStatus] (
    [Id]          INT           NOT NULL,
    [Description] NVARCHAR (50) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[tblInviteStatus])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_tblInviteStatus] ([Id], [Description])
        SELECT   [Id],
                 [Description]
        FROM     [dbo].[tblInviteStatus]
        ORDER BY [Id] ASC;
    END

DROP TABLE [dbo].[tblInviteStatus];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_tblInviteStatus]', N'tblInviteStatus';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Starting rebuilding table [dbo].[tblPost]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_tblPost] (
    [Id]             UNIQUEIDENTIFIER NOT NULL,
    [OwnerUserId]    UNIQUEIDENTIFIER NOT NULL,
    [TargetGroupId]  UNIQUEIDENTIFIER NOT NULL,
    [Title]          NVARCHAR (50)    NOT NULL,
    [Content]        NVARCHAR (50)    NOT NULL,
    [IsSticky]       BIT              NOT NULL,
    [IsDeleted]      BIT              NOT NULL,
    [TimeStamp]      DATETIME         NOT NULL,
    [EventTimeStamp] DATETIME         NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[tblPost])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_tblPost] ([Id], [OwnerUserId], [TargetGroupId], [Title], [Content], [IsSticky], [IsDeleted], [TimeStamp], [EventTimeStamp])
        SELECT   [Id],
                 [OwnerUserId],
                 [TargetGroupId],
                 [Title],
                 [Content],
                 [IsSticky],
                 [IsDeleted],
                 [TimeStamp],
                 [EventTimeStamp]
        FROM     [dbo].[tblPost]
        ORDER BY [Id] ASC;
    END

DROP TABLE [dbo].[tblPost];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_tblPost]', N'tblPost';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering [dbo].[tblState]...';


GO
ALTER TABLE [dbo].[tblState] ALTER COLUMN [StateName] NVARCHAR (50) NOT NULL;


GO
PRINT N'Altering [dbo].[tblUser]...';


GO
ALTER TABLE [dbo].[tblUser] ALTER COLUMN [Address] NVARCHAR (50) NULL;

ALTER TABLE [dbo].[tblUser] ALTER COLUMN [FirstName] NVARCHAR (50) NOT NULL;

ALTER TABLE [dbo].[tblUser] ALTER COLUMN [LastName] NVARCHAR (50) NOT NULL;

ALTER TABLE [dbo].[tblUser] ALTER COLUMN [MiddleInitial] NVARCHAR (2) NULL;

ALTER TABLE [dbo].[tblUser] ALTER COLUMN [Username] NVARCHAR (50) NOT NULL;

ALTER TABLE [dbo].[tblUser] ALTER COLUMN [Zip] INT NULL;


GO
PRINT N'Creating [dbo].[spCreateUser]...';


GO
--Creates user and adds random salt to password.

CREATE PROCEDURE [dbo].[spCreateUser]
	@Username nvarchar(40),
	@Password nvarchar(24),
	@FirstName nvarchar(50),
	@MiddleInitial nvarchar(2),
	@Lastname nvarchar(50),
	@Zip int,
	@Address nvarchar(50),
	@IsAddressPrivate bit,
	@Response nvarchar(100) output
AS
BEGIN
	SET NOCOUNT ON

	IF EXISTS(SELECT * FROM [dbo].[tblUser] WHERE Username = @Username)
	BEGIN
		SET @Response='Username is taken.'
	    RETURN 0
	END
    DECLARE @salt UNIQUEIDENTIFIER=NEWID()
    BEGIN TRY

        INSERT INTO [dbo].[tblUser] (Id, Username, PasswordHash, PasswordSalt, FirstName, MiddleInitial, LastName, Zip, Address, IsAddressPrivate, UserImg)
        VALUES(NewId(), @Username, HASHBYTES('SHA2_512', @Password+CAST(@salt AS NVARCHAR(36))), @salt, @FirstName, @MiddleInitial, @LastName, @Zip, @Address, @IsAddressPrivate, null)

        SET @Response='Successfully added user!'
		RETURN 1
    END TRY
    BEGIN CATCH
        SET @Response=ERROR_MESSAGE() 
		RETURN 0
    END CATCH
END
GO
PRINT N'Creating [dbo].[spDoLogin]...';


GO
--returns the GUID for the user if the login succeed, otherwise returns nothing

CREATE PROCEDURE [dbo].[spDoLogin]
	@Username nvarchar(50),
	@Password nvarchar(24)
AS
BEGIN
     SET NOCOUNT ON
     SELECT Id FROM [dbo].[tblUser] WHERE Username=@Username AND PasswordHash=HASHBYTES('SHA2_512', @Password+CAST(PasswordSalt AS NVARCHAR(36)))
END
GO
PRINT N'Update complete.';


GO
