/*
Deployment script for WorkWithMe

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "WorkWithMe"
:setvar DefaultFilePrefix "WorkWithMe"
:setvar DefaultDataPath ""
:setvar DefaultLogPath ""

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
PRINT N'Rename refactoring operation with key fed7cd80-d1fb-4264-b5fa-724e52bf9560 is skipped, element [dbo].[tblUser].[UserImg] (SqlSimpleColumn) will not be renamed to UserImgId';


GO
PRINT N'Dropping unnamed constraint on [dbo].[tblUser]...';


GO
ALTER TABLE [dbo].[tblUser] DROP CONSTRAINT [DF__tblUser__EmailAd__693CA210];


GO
PRINT N'Starting rebuilding table [dbo].[tblUser]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_tblUser] (
    [Id]               UNIQUEIDENTIFIER NOT NULL,
    [Username]         NVARCHAR (50)    NOT NULL,
    [PasswordHash]     BINARY (64)      NOT NULL,
    [PasswordSalt]     UNIQUEIDENTIFIER NOT NULL,
    [FirstName]        NVARCHAR (50)    NOT NULL,
    [MiddleInitial]    NVARCHAR (2)     NULL,
    [LastName]         NVARCHAR (50)    NOT NULL,
    [Zip]              INT              NULL,
    [Address]          NVARCHAR (50)    NULL,
    [IsAddressPrivate] BIT              NOT NULL,
    [UserImgId]        INT              NULL,
    [EmailAddress]     NVARCHAR (255)   DEFAULT 'email' NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[tblUser])
    BEGIN
        INSERT INTO [dbo].[tmp_ms_xx_tblUser] ([Id], [Username], [PasswordHash], [PasswordSalt], [FirstName], [MiddleInitial], [LastName], [Zip], [Address], [IsAddressPrivate], [EmailAddress])
        SELECT   [Id],
                 [Username],
                 [PasswordHash],
                 [PasswordSalt],
                 [FirstName],
                 [MiddleInitial],
                 [LastName],
                 [Zip],
                 [Address],
                 [IsAddressPrivate],
                 [EmailAddress]
        FROM     [dbo].[tblUser]
        ORDER BY [Id] ASC;
    END

DROP TABLE [dbo].[tblUser];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_tblUser]', N'tblUser';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Creating [dbo].[tblUserImg]...';


GO
CREATE TABLE [dbo].[tblUserImg] (
    [Id]           INT             IDENTITY (0, 1) NOT NULL,
    [ImageName]    NVARCHAR (255)  NOT NULL,
    [ImageSize]    NVARCHAR (6)    NOT NULL,
    [ImageContent] VARBINARY (MAX) NOT NULL,
    PRIMARY KEY CLUSTERED ([Id] ASC)
);


GO
PRINT N'Altering [dbo].[spCreateUser]...';


GO
--Creates user and adds random salt to password.

ALTER PROCEDURE [dbo].[spCreateUser]
	@Username nvarchar(40),
	@Password nvarchar(24),
	@FirstName nvarchar(50),
	@MiddleInitial nvarchar(2),
	@LastName nvarchar(50),
	@Zip int,
	@Address nvarchar(50),
	@City nvarchar(50),
	@State nvarchar(2),
	@IsAddressPrivate bit,
	@EmailAddress nvarchar(255),
	@Response nvarchar(100) output
AS
BEGIN
	SET NOCOUNT ON

	IF EXISTS (SELECT * FROM [dbo].[tblUser] WHERE Username = @Username)
	BEGIN
		SET @Response='Username is taken.'
	    RETURN 0
	END
	IF EXISTS (SELECT * from [dbo].[tblUser] WHERE EmailAddress = @EmailAddress)
	BEGIN
	    SET @Response='Email address already exists.  Only one user per email please.'
	    RETURN 0
	END

    DECLARE @salt UNIQUEIDENTIFIER=NEWID()


    BEGIN TRY
	
        INSERT INTO [dbo].[tblUser] (Id, Username, PasswordHash, PasswordSalt, FirstName, MiddleInitial, LastName, EmailAddress, Zip, Address, IsAddressPrivate, UserImgId)
        VALUES(NewId(), @Username, HASHBYTES('SHA2_512', @Password+CAST(@salt AS NVARCHAR(36))), @salt, @FirstName, @MiddleInitial, @LastName, @EmailAddress, @Zip, @Address, @IsAddressPrivate, null);
		
		IF NOT EXISTS(SELECT TOP 1 s.Id FROM tblState s WHERE s.StateName = @State)
		    INSERT INTO [dbo].[tblState] (Id, StateName) VALUES (NewId(), @State)
	
		IF NOT EXISTS(SELECT TOP 1 c.Id FROM tblCity c WHERE c.Cityname = @City)
		    INSERT INTO [dbo].[tblCity] (Id, CityName) VALUES (NewId(), @City)
		
		DECLARE @cityId UNIQUEIDENTIFIER = (SELECT c.Id FROM tblCity c WHERE c.CityName = @City);
		DECLARE @stateId UNIQUEIDENTIFIER = (SELECT s.Id FROM tblState s WHERE s.StateName = @State);

		IF NOT EXISTS (SELECT TOP 1 z.Id FROM tblZip z WHERE z.Id = @Zip)
		    INSERT INTO [dbo].[tblZip] (Id, CityId, StateId) VALUES (@Zip, @cityId, @stateId)
		
        SET @Response='Successfully added user!'
		RETURN 1
    END TRY
    BEGIN CATCH
        SET @Response=ERROR_MESSAGE() 
		RETURN 0
    END CATCH
END
GO
PRINT N'Refreshing [dbo].[spDoLogin]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spDoLogin]';


GO
PRINT N'Refreshing [dbo].[spGetOffsetPostsForUser]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spGetOffsetPostsForUser]';


GO
PRINT N'Refreshing [dbo].[spGetPostsForUser]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spGetPostsForUser]';


GO
PRINT N'Refreshing [dbo].[spGetRepliesForPost]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spGetRepliesForPost]';


GO
PRINT N'Refreshing [dbo].[spSearchUser]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spSearchUser]';


GO
PRINT N'Refreshing [dbo].[spUpdateUser]...';


GO
EXECUTE sp_refreshsqlmodule N'[dbo].[spUpdateUser]';


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
delete from tblUser WHERE Username = 'Test'; 

declare @response nvarchar(100);

exec spCreateUser @Username = 'Test',
 @Password = 'Test', @FirstName = 'Testy', 
 @MiddleInitial = 'T', 
 @Lastname = 'McTesterson',
 @Zip = 54914,
 @City = 'Appleton',
 @State = 'WI',
 @Address = '1234 Street Rd',
 @IsAddressPrivate = 0,
 @EmailAddress = 'test@test.test',
 @Response = @response output;

 PRINT @response;

 delete from tblInviteStatus;

 insert into tblInviteStatus (Id, Description)
 values 
   (0,'Invited'),
   (1,'Declined'),
   (2,'Accepted'),
   (3,'Blocked');

 delete from tblUserContact where OwnerUserId = '00000000-0000-0000-0000-000000000000';

 insert into tblUserContact (Id, OwnerUserId, TargetUserId, InviteStatusId)
 values (NewID(), '00000000-0000-0000-0000-000000000000','00000000-0000-0000-0000-000000000001',2);

 delete from tblPost where OwnerUserId = '00000000-0000-0000-0000-000000000000';
 delete from tblPost where OwnerUserId = '00000000-0000-0000-0000-000000000001';

 insert into tblPost (Id, OwnerUserId, Title, Content, IsSticky, IsDeleted, TimeStamp, EventTimeStamp)
 values
 (NewId(),'00000000-0000-0000-0000-000000000000','Test Post from User 0','Stuff A',0,0, GETDATE(),null),
 (NewId(),'00000000-0000-0000-0000-000000000001','Test Post from User 1','Stuff B',0,0, GETDATE(),null);
GO

GO
PRINT N'Update complete.';


GO
